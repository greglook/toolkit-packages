#!/usr/bin/env ruby

# This script calculates diffs between two trees of files. The left and right
# sides are compared for files or directories on only one side or another.
# Directories on both sides are compared recursively, and files on both sides
# are compared for content.

require 'optparse'
require 'digest/sha1'

$diff_glob = nil
$diff_command = 'git diff -u --histogram --color --no-index --'
$word_diff_command = 'git diff -u --histogram --word-diff --color --no-index --'
$verbose = false

# Parse command-line options.
options = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] <left-dir> <right-dir>"
  opts.on('-c', '--compare GLOB', "Show diffs between files which match the given glob") {|glob| $diff_glob = glob }
  opts.on('-d', '--diff CMD', "Set the command to use to diff files (default: '#{$diff_command}')") {|cmd| $diff_command = cmd }
  opts.on('-w', '--word-diff', "Use the default word-diff command (default: '#{$word_diff_command}')") { $diff_command = $word_diff_command }
  opts.on('-v', '--verbose', "Show more output") { $verbose = true }
  opts.on('-h', '--help', "Print these options") { puts opts; exit }
end
options.parse!


##### HELPER FUNCTIONS #####

COLORS = [:black, :red, :green, :yellow, :blue, :magenta, :cyan, :white].freeze

# Apply ANSI color codes to the given text.
def colorize(text, *colors)
  sgr = "\e[%sm"
  none = 0
  bold = 1
  fg = 30

  codes = colors.map do |k|
    if k == :bold
      bold
    else
      i = COLORS.index {|c| c == k }
      raise "No such color: #{k}" unless i
      fg + i
    end
  end

  [sgr % codes.join(';'), text, sgr % none].join
end


##### FILE COMPARISON #####

# Determine what category of file is at path `f`.
def file_type(f)
  if f.nil? || ! File.exists?(f)
    :absent
  elsif File.directory? f
    :directory
  elsif File.file? f
    :file
  else
    :other
  end
end

# Computes the hex-encoded SHA-1 of the file at path `f`.
def file_hash(f)
  Digest::SHA1.hexdigest(File.read(f))
end

def dir_children(d)
  Dir.entries(d).reject {|x| ['.', '..'].include? x }
end

# Returns a sequence of pairs of file paths to compare by taking the union of
# the entries in the two directories `l` and `r`.
def child_paths(prefix, l, r)
  children = (dir_children(l) + dir_children(r)).uniq.sort
  if prefix
    children.map {|x| File.join(prefix, x) }
  else
    children
  end
end

# Render a tree node as text.
def render_node(path, type)
  case type
  when :absent
    nil
  when :file
    path
  when :directory
    "#{path}/"
  else
    "#{path} (#{type})"
  end
end

# Recursively compares the two directory trees, printing out any differences
# discovered. Returns true if the two trees match, otherwise returns false.
def compare_tree(left, right, path)
  lpath = File.join(left, path)
  rpath = File.join(right, path)

  ltype = file_type(lpath)
  rtype = file_type(rpath)

  if ltype == :absent && rtype == :absent
    # neither file exists
    puts colorize("??????? #{path} absent on both sides", :magenta)
    true
  elsif rtype == :absent
    # file only on left side
    puts colorize("- #{render_node(path, ltype)}", :red)
    false
  elsif ltype == :absent
    # file only on right side
    puts colorize("+ #{render_node(path, rtype)}", :green)
    false
  elsif ltype != rtype
    # file types don't match
    puts colorize("- #{render_node(path, ltype)}", :red)
    puts colorize("+ #{render_node(path, rtype)}", :green)
    false
  elsif ltype == :file
    # both files
    lhash = file_hash(lpath)
    rhash = file_hash(rpath)
    if lhash == rhash
      puts colorize("  #{render_node(path, ltype)}", :cyan) if $verbose
      true
    else
      puts colorize("~ #{path}", :yellow)
      if $diff_glob && File.fnmatch($diff_glob, path)
        puts `#{$diff_command} #{lpath} #{rpath}`
        puts colorize('~', :yellow)
      end
      false
    end
  elsif ltype == :directory
    # both directories
    child_paths(path, lpath, rpath).map do |child|
      compare_tree(left, right, child)
    end.all?
  else
    # don't know how to compare
    puts colorize("Don't know how to compare #{path} (#{ltype})", :magenta)
    false
  end
end


##### SCRIPT EXECUTOIN #####

# Helper method to abort the script.
def fail(msg, code=1)
  STDERR.puts msg
  exit code
end

# Check number of arguments.
if ARGV.count < 2
  fail options
elsif ARGV.count > 2
  STDERR.puts "Too many arguments!"
  fail options
end

left = ARGV[0]
right = ARGV[1]

unless File.directory?(left) && File.directory?(right)
  fail "Left and right comparison origins must be directories"
end

# Run comparison.
puts "Comparing #{left} <=> #{right}"
match = child_paths(nil, left, right).map do |child|
  compare_tree(left, right, child)
end.all?
exit match ? 0 : 1
