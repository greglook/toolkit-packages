#!/usr/bin/env bash

STATE_DIR="${XDG_STATE_HOME:-${HOME}/.local/state}/hyprlaunch"
LOG_DIR="${STATE_DIR}/log"
PID_DIR="${STATE_DIR}/pids"
mkdir -p "$LOG_DIR" "$PID_DIR"

# Log a message from the script
log() {
    local label="$1"
    shift
    echo "$(date --iso-8601=seconds) $@" >> "${LOG_DIR}/${label}.log"
}

# Print the PID of the launcher process which is currently responsible for this
# command.
launcher-pid() {
    local label="$1"
    local pid_file="${PID_DIR}/${label}.pid"
    if [[ -f $pid_file ]]; then
        cat "$pid_file"
    fi
}

# Clean up while exiting the script.
cleanup() {
    local label="$1"
    local cmd="$2"
    local pid_file="${PID_DIR}/${label}.pid"
    if [[ $(launcher-pid $label) == $$ ]]; then
        rm -f "$pid_file"
    fi
    pkill -f "$cmd" -u $USER -P $$ 2> /dev/null
}

run-service() {
    local label=""
    local deps=()

    while :; do
        case "${1-}" in
            -l | --label)
                label="$2"
                shift
                ;;
            -d | --depends-on)
                deps+="$2"
                shift
                ;;
            -?*)
                echo "Unknown run option: $1" >&2
                exit 1
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    local cmd="$1"
    shift

    [[ -n $label ]] || label="$cmd"

    trap "cleanup $label $cmd" EXIT

    # Write our process id to the file.
    local pid_file="${PID_DIR}/${label}.pid"
    echo "$$" > $pid_file

    while true; do
        # Exit if no longer running Hyprland
        if ! pgrep Hyprland > /dev/null; then
            log $label "Hyprland no longer running! Exiting launcher for $label"
            exit
        fi

        # Exit if we're no longer responsible for the command
        local current_pid="$(launcher-pid $label)"
        if [[ $current_pid != $$ ]]; then
            log $label "Launcher process $current_pid has taken responsibility for $label, exiting"
            exit
        fi

        # Check to make sure all dependencies are running
        local waiting_deps=()
        for dep in ${deps[@]}; do
            if ! pidof "$dep"; then
                waiting_deps+="$dep"
            fi
        done
        if [[ ${#waiting_deps[@]} -gt 0 ]]; then
            log $label "Waiting for dependencies: ${waiting_deps[@]}"
            sleep 3
            continue
        fi

        # Kill any existing processes
        if pgrep "$cmd" 2> /dev/null; then
            log $label "Killing existing $label processes..."
            killall "$cmd" 2> /dev/null
            sleep 1
        fi

        # Launch process
        log $label "Launching new $label process..."
        "$cmd" "$@" 2>&1 >> "$LOG_DIR/${label}.log"

        local exit_code=$?
        if [[ $exit_code -ne 0 ]]; then
            log $label "$label service command exited with failure code $exit_code"
        fi

        # Prevent runaway restarts
        sleep 1
    done
}

action="$1"
shift

case $action in
    run)
        run-service "$@"
        ;;

    list)
        pgrep -f "${BASH_SOURCE[0]}" -u $USER -P 1 -a | cut -d ' ' -f 1,4-
        ;;

    kill)
        pkill -f "${BASH_SOURCE[0]}" -u $USER -P 1 -e
        ;;

    *)
        echo "Unknown action: $action" >&2
        exit 1
        ;;
esac
